알고리즘 스터디를 하며 코드리뷰를 자주 해야될 것 같다는 생각이 들었다. 
가뜩이나 알고리즘이랑 개발에 약한데 코드리뷰 까지 생각해야한다니…
아무튼 나름 좋은 기회라 생각되고, 이번엔 코드리뷰를 왜 해야하는지, 어떤 좋은점이 있는지 찾아보고 고민해봤다…

좋은 비평을 받고 좋은 리뷰를 하려면?
	1. 리뷰는 언제나 상호 합의가 되어진 상황에서 진행되어야 한다.
	2. 리뷰어의 해당 결과물에 대해서 객관성을 가지고 서로 인지해야 한다.
	3. 개발자 자신의 작업물에 대해서 정말 객관적으로 바라볼 수 있는 작성가가 선정되어야 한다.


코드리뷰가 필요없는 경우 체크리스트
	1. 특정 도메인만 다루는 팀이나 회사의 개발팀인가?
	2. 지난 2~3년 정도 솔루션이 크게 변한 것이 없으며, 향후로도 기업이나 팀에서 투자가 없을 예정이다.
	3. 현재 개발자들이 해당 솔루션에 대한 개발일을 5년 이상 하고있다.
	4. 기능 위주의 SI성 업무를 주로 처리하고 있으며, 복잡한 알고리즘은 존재하지 않는다.
	5. 비용과 일정상 개발팀에게 리소스 투여가 불가능하다.

코드리뷰가 필요한 경우
	1. 다국어와 시장이 다변회된 환경에서 소프트웨어가 구동되어야 한다.
	2. 코드의 복잡도가 높으며, 단순 기능 나열의 요구사항이 아니라, 소프트웨어 아키텍쳐가 별도로 구성되기 시작하였다.
	3. 사용자의 경험성을 증가하기 위하여 매우 많은 변화가 예측된다.
	4. 현재 개발 중인 서비스는 중단 없이, 지속적으로 발전되어야 하는 서비스이다.
	5. 목표 요구사항이 계속 변화하고 있고, 프레임워크를 지향하여 소프트웨어 품질의 요구사항이 매우 중요하다.

최소 체크리스트
	1. 실험적인 코드인가?
	2. 1~2명 이상이 공동으로 작업하는 코드인가?
	3. 향후 버려질 가능성이 높은 코드인가?


좋은 내용이 많다…
https://brunch.co.kr/@supims/11

